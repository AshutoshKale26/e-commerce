import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { Product } from '../../../product.model';

interface address{
  address: string;
  city: string;
  pincode: string;
  contactNumber: string;
}

// export interface Order {
//   id: string; // Optional, as it will be generated by the server
//   userId: string;
//   cartItems: { product: Product, quantity: number }[];
//  // Optional
//   createdAt?: Date;
//   shippingInfo:{ addressLane: string; road: string;city: string;pincode: string;contact: string;altContact?: string; };
//   quantity: number
// }
export interface Order {
  id: string;
  userId: string;
  sellerId:string;
  product: Product;
  quantity: number;
  createdAt?: Date;
  shippingInfo: {
    addressLane: string;
    road: string;
    city: string;
    pincode: string;
    contact: string;
    altContact?: string;
  };
  showDetails?: boolean;
}

@Injectable({
  providedIn: 'root'
})
export class OrderService {
  private apiUrl = 'http://localhost:3000/orders'; // Change this to your JSON server URL

  constructor(private http: HttpClient) {}

  placeOrder(order: Order): Observable<Order> {
    return this.http.post<Order>(this.apiUrl, order);
  }

  getUserOrders(userId: string): Observable<Order[]> {
    return this.http.get<Order[]>(`${this.apiUrl}?userId=${userId}`);
  }

  getOrdersBySellerId():Observable<Order[]>{
    const sellerId = JSON.parse(localStorage.getItem('sellerData') || '{}').id;
    return this.http.get<Order[]>(`${this.apiUrl}?sellerId=${sellerId}`);
  }

  private handleError(error: HttpErrorResponse) {
    console.error('An error occurred:', error.error);
    return throwError('Something went wrong; please try again later.');
  }

  deleteOrder(orderId: string): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${orderId}`);
  }

  updateOrder(order: Order): Observable<Order> {
    return this.http.put<Order>(`${this.apiUrl}/${order.id}`, order);
  }
}
